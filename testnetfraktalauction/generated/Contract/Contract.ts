// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminWithdrawFees extends ethereum.Event {
  get params(): AdminWithdrawFees__Params {
    return new AdminWithdrawFees__Params(this);
  }
}

export class AdminWithdrawFees__Params {
  _event: AdminWithdrawFees;

  constructor(event: AdminWithdrawFees) {
    this._event = event;
  }

  get feesAccrued(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class AuctionContribute extends ethereum.Event {
  get params(): AuctionContribute__Params {
    return new AuctionContribute__Params(this);
  }
}

export class AuctionContribute__Params {
  _event: AuctionContribute;

  constructor(event: AuctionContribute) {
    this._event = event;
  }

  get participant(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get sellerNonce(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class AuctionItemListed extends ethereum.Event {
  get params(): AuctionItemListed__Params {
    return new AuctionItemListed__Params(this);
  }
}

export class AuctionItemListed__Params {
  _event: AuctionItemListed;

  constructor(event: AuctionItemListed) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get reservePrice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountOfShares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get nonce(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Bought extends ethereum.Event {
  get params(): Bought__Params {
    return new Bought__Params(this);
  }
}

export class Bought__Params {
  _event: Bought;

  constructor(event: Bought) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get numberOfShares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Deployed extends ethereum.Event {
  get params(): Deployed__Params {
    return new Deployed__Params(this);
  }
}

export class Deployed__Params {
  _event: Deployed;

  constructor(event: Deployed) {
    this._event = event;
  }
}

export class FeeUpdated extends ethereum.Event {
  get params(): FeeUpdated__Params {
    return new FeeUpdated__Params(this);
  }
}

export class FeeUpdated__Params {
  _event: FeeUpdated;

  constructor(event: FeeUpdated) {
    this._event = event;
  }

  get newFee(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class FraktalClaimed extends ethereum.Event {
  get params(): FraktalClaimed__Params {
    return new FraktalClaimed__Params(this);
  }
}

export class FraktalClaimed__Params {
  _event: FraktalClaimed;

  constructor(event: FraktalClaimed) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ItemListed extends ethereum.Event {
  get params(): ItemListed__Params {
    return new ItemListed__Params(this);
  }
}

export class ItemListed__Params {
  _event: ItemListed;

  constructor(event: ItemListed) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountOfShares(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OfferMade extends ethereum.Event {
  get params(): OfferMade__Params {
    return new OfferMade__Params(this);
  }
}

export class OfferMade__Params {
  _event: OfferMade;

  constructor(event: OfferMade) {
    this._event = event;
  }

  get offerer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OfferVoted extends ethereum.Event {
  get params(): OfferVoted__Params {
    return new OfferVoted__Params(this);
  }
}

export class OfferVoted__Params {
  _event: OfferVoted;

  constructor(event: OfferVoted) {
    this._event = event;
  }

  get voter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get offerer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get sold(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SellerPaymentPull extends ethereum.Event {
  get params(): SellerPaymentPull__Params {
    return new SellerPaymentPull__Params(this);
  }
}

export class SellerPaymentPull__Params {
  _event: SellerPaymentPull;

  constructor(event: SellerPaymentPull) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get balance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Contract__auctionListingsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: Address, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class Contract__offersResult {
  value0: BigInt;
  value1: boolean;

  constructor(value0: BigInt, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  auctionListings(
    param0: Address,
    param1: Address,
    param2: BigInt
  ): Contract__auctionListingsResult {
    let result = super.call(
      "auctionListings",
      "auctionListings(address,address,uint256):(address,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return new Contract__auctionListingsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_auctionListings(
    param0: Address,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<Contract__auctionListingsResult> {
    let result = super.tryCall(
      "auctionListings",
      "auctionListings(address,address,uint256):(address,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__auctionListingsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  auctionNonce(param0: Address): BigInt {
    let result = super.call("auctionNonce", "auctionNonce(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_auctionNonce(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionNonce",
      "auctionNonce(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  auctionReserve(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "auctionReserve",
      "auctionReserve(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_auctionReserve(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionReserve",
      "auctionReserve(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  auctionSellerRedeemed(param0: Address, param1: BigInt): boolean {
    let result = super.call(
      "auctionSellerRedeemed",
      "auctionSellerRedeemed(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_auctionSellerRedeemed(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "auctionSellerRedeemed",
      "auctionSellerRedeemed(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  fee(): i32 {
    let result = super.call("fee", "fee():(uint16)", []);

    return result[0].toI32();
  }

  try_fee(): ethereum.CallResult<i32> {
    let result = super.tryCall("fee", "fee():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getFee(): BigInt {
    let result = super.call("getFee", "getFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getFee", "getFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getListingAmount(_listOwner: Address, tokenAddress: Address): BigInt {
    let result = super.call(
      "getListingAmount",
      "getListingAmount(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_listOwner),
        ethereum.Value.fromAddress(tokenAddress)
      ]
    );

    return result[0].toBigInt();
  }

  try_getListingAmount(
    _listOwner: Address,
    tokenAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getListingAmount",
      "getListingAmount(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_listOwner),
        ethereum.Value.fromAddress(tokenAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getListingPrice(_listOwner: Address, tokenAddress: Address): BigInt {
    let result = super.call(
      "getListingPrice",
      "getListingPrice(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_listOwner),
        ethereum.Value.fromAddress(tokenAddress)
      ]
    );

    return result[0].toBigInt();
  }

  try_getListingPrice(
    _listOwner: Address,
    tokenAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getListingPrice",
      "getListingPrice(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_listOwner),
        ethereum.Value.fromAddress(tokenAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOffer(offerer: Address, tokenAddress: Address): BigInt {
    let result = super.call("getOffer", "getOffer(address,address):(uint256)", [
      ethereum.Value.fromAddress(offerer),
      ethereum.Value.fromAddress(tokenAddress)
    ]);

    return result[0].toBigInt();
  }

  try_getOffer(
    offerer: Address,
    tokenAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOffer",
      "getOffer(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(offerer),
        ethereum.Value.fromAddress(tokenAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSellerBalance(_who: Address): BigInt {
    let result = super.call(
      "getSellerBalance",
      "getSellerBalance(address):(uint256)",
      [ethereum.Value.fromAddress(_who)]
    );

    return result[0].toBigInt();
  }

  try_getSellerBalance(_who: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSellerBalance",
      "getSellerBalance(address):(uint256)",
      [ethereum.Value.fromAddress(_who)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  listItem(
    _tokenAddress: Address,
    _price: BigInt,
    _numberOfShares: BigInt
  ): boolean {
    let result = super.call(
      "listItem",
      "listItem(address,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_tokenAddress),
        ethereum.Value.fromUnsignedBigInt(_price),
        ethereum.Value.fromUnsignedBigInt(_numberOfShares)
      ]
    );

    return result[0].toBoolean();
  }

  try_listItem(
    _tokenAddress: Address,
    _price: BigInt,
    _numberOfShares: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "listItem",
      "listItem(address,uint256,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_tokenAddress),
        ethereum.Value.fromUnsignedBigInt(_price),
        ethereum.Value.fromUnsignedBigInt(_numberOfShares)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  listItemAuction(
    _tokenAddress: Address,
    _reservePrice: BigInt,
    _numberOfShares: BigInt
  ): BigInt {
    let result = super.call(
      "listItemAuction",
      "listItemAuction(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_tokenAddress),
        ethereum.Value.fromUnsignedBigInt(_reservePrice),
        ethereum.Value.fromUnsignedBigInt(_numberOfShares)
      ]
    );

    return result[0].toBigInt();
  }

  try_listItemAuction(
    _tokenAddress: Address,
    _reservePrice: BigInt,
    _numberOfShares: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "listItemAuction",
      "listItemAuction(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_tokenAddress),
        ethereum.Value.fromUnsignedBigInt(_reservePrice),
        ethereum.Value.fromUnsignedBigInt(_numberOfShares)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxPriceRegistered(param0: Address): BigInt {
    let result = super.call(
      "maxPriceRegistered",
      "maxPriceRegistered(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_maxPriceRegistered(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxPriceRegistered",
      "maxPriceRegistered(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  offers(param0: Address, param1: Address): Contract__offersResult {
    let result = super.call(
      "offers",
      "offers(address,address):(uint256,bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return new Contract__offersResult(
      result[0].toBigInt(),
      result[1].toBoolean()
    );
  }

  try_offers(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<Contract__offersResult> {
    let result = super.tryCall(
      "offers",
      "offers(address,address):(uint256,bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__offersResult(value[0].toBigInt(), value[1].toBoolean())
    );
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  participantContribution(
    param0: Address,
    param1: BigInt,
    param2: Address
  ): BigInt {
    let result = super.call(
      "participantContribution",
      "participantContribution(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );

    return result[0].toBigInt();
  }

  try_participantContribution(
    param0: Address,
    param1: BigInt,
    param2: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "participantContribution",
      "participantContribution(address,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sellersBalance(param0: Address): BigInt {
    let result = super.call(
      "sellersBalance",
      "sellersBalance(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_sellersBalance(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sellersBalance",
      "sellersBalance(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdrawAccruedFees(): boolean {
    let result = super.call(
      "withdrawAccruedFees",
      "withdrawAccruedFees():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_withdrawAccruedFees(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "withdrawAccruedFees",
      "withdrawAccruedFees():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyFraktionsCall extends ethereum.Call {
  get inputs(): BuyFraktionsCall__Inputs {
    return new BuyFraktionsCall__Inputs(this);
  }

  get outputs(): BuyFraktionsCall__Outputs {
    return new BuyFraktionsCall__Outputs(this);
  }
}

export class BuyFraktionsCall__Inputs {
  _call: BuyFraktionsCall;

  constructor(call: BuyFraktionsCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _numberOfShares(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BuyFraktionsCall__Outputs {
  _call: BuyFraktionsCall;

  constructor(call: BuyFraktionsCall) {
    this._call = call;
  }
}

export class ClaimFraktalCall extends ethereum.Call {
  get inputs(): ClaimFraktalCall__Inputs {
    return new ClaimFraktalCall__Inputs(this);
  }

  get outputs(): ClaimFraktalCall__Outputs {
    return new ClaimFraktalCall__Outputs(this);
  }
}

export class ClaimFraktalCall__Inputs {
  _call: ClaimFraktalCall;

  constructor(call: ClaimFraktalCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimFraktalCall__Outputs {
  _call: ClaimFraktalCall;

  constructor(call: ClaimFraktalCall) {
    this._call = call;
  }
}

export class ExportFraktalCall extends ethereum.Call {
  get inputs(): ExportFraktalCall__Inputs {
    return new ExportFraktalCall__Inputs(this);
  }

  get outputs(): ExportFraktalCall__Outputs {
    return new ExportFraktalCall__Outputs(this);
  }
}

export class ExportFraktalCall__Inputs {
  _call: ExportFraktalCall;

  constructor(call: ExportFraktalCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ExportFraktalCall__Outputs {
  _call: ExportFraktalCall;

  constructor(call: ExportFraktalCall) {
    this._call = call;
  }
}

export class ImportFraktalCall extends ethereum.Call {
  get inputs(): ImportFraktalCall__Inputs {
    return new ImportFraktalCall__Inputs(this);
  }

  get outputs(): ImportFraktalCall__Outputs {
    return new ImportFraktalCall__Outputs(this);
  }
}

export class ImportFraktalCall__Inputs {
  _call: ImportFraktalCall;

  constructor(call: ImportFraktalCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get fraktionsIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ImportFraktalCall__Outputs {
  _call: ImportFraktalCall;

  constructor(call: ImportFraktalCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class ListItemCall extends ethereum.Call {
  get inputs(): ListItemCall__Inputs {
    return new ListItemCall__Inputs(this);
  }

  get outputs(): ListItemCall__Outputs {
    return new ListItemCall__Outputs(this);
  }
}

export class ListItemCall__Inputs {
  _call: ListItemCall;

  constructor(call: ListItemCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _numberOfShares(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ListItemCall__Outputs {
  _call: ListItemCall;

  constructor(call: ListItemCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ListItemAuctionCall extends ethereum.Call {
  get inputs(): ListItemAuctionCall__Inputs {
    return new ListItemAuctionCall__Inputs(this);
  }

  get outputs(): ListItemAuctionCall__Outputs {
    return new ListItemAuctionCall__Outputs(this);
  }
}

export class ListItemAuctionCall__Inputs {
  _call: ListItemAuctionCall;

  constructor(call: ListItemAuctionCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _reservePrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _numberOfShares(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ListItemAuctionCall__Outputs {
  _call: ListItemAuctionCall;

  constructor(call: ListItemAuctionCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MakeOfferCall extends ethereum.Call {
  get inputs(): MakeOfferCall__Inputs {
    return new MakeOfferCall__Inputs(this);
  }

  get outputs(): MakeOfferCall__Outputs {
    return new MakeOfferCall__Outputs(this);
  }
}

export class MakeOfferCall__Inputs {
  _call: MakeOfferCall;

  constructor(call: MakeOfferCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MakeOfferCall__Outputs {
  _call: MakeOfferCall;

  constructor(call: MakeOfferCall) {
    this._call = call;
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ParticipateAuctionCall extends ethereum.Call {
  get inputs(): ParticipateAuctionCall__Inputs {
    return new ParticipateAuctionCall__Inputs(this);
  }

  get outputs(): ParticipateAuctionCall__Outputs {
    return new ParticipateAuctionCall__Outputs(this);
  }
}

export class ParticipateAuctionCall__Inputs {
  _call: ParticipateAuctionCall;

  constructor(call: ParticipateAuctionCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get seller(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get sellerNonce(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ParticipateAuctionCall__Outputs {
  _call: ParticipateAuctionCall;

  constructor(call: ParticipateAuctionCall) {
    this._call = call;
  }
}

export class RedeemAuctionParticipantCall extends ethereum.Call {
  get inputs(): RedeemAuctionParticipantCall__Inputs {
    return new RedeemAuctionParticipantCall__Inputs(this);
  }

  get outputs(): RedeemAuctionParticipantCall__Outputs {
    return new RedeemAuctionParticipantCall__Outputs(this);
  }
}

export class RedeemAuctionParticipantCall__Inputs {
  _call: RedeemAuctionParticipantCall;

  constructor(call: RedeemAuctionParticipantCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _seller(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _sellerNonce(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RedeemAuctionParticipantCall__Outputs {
  _call: RedeemAuctionParticipantCall;

  constructor(call: RedeemAuctionParticipantCall) {
    this._call = call;
  }
}

export class RedeemAuctionSellerCall extends ethereum.Call {
  get inputs(): RedeemAuctionSellerCall__Inputs {
    return new RedeemAuctionSellerCall__Inputs(this);
  }

  get outputs(): RedeemAuctionSellerCall__Outputs {
    return new RedeemAuctionSellerCall__Outputs(this);
  }
}

export class RedeemAuctionSellerCall__Inputs {
  _call: RedeemAuctionSellerCall;

  constructor(call: RedeemAuctionSellerCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _seller(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _sellerNonce(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RedeemAuctionSellerCall__Outputs {
  _call: RedeemAuctionSellerCall;

  constructor(call: RedeemAuctionSellerCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RescueEthCall extends ethereum.Call {
  get inputs(): RescueEthCall__Inputs {
    return new RescueEthCall__Inputs(this);
  }

  get outputs(): RescueEthCall__Outputs {
    return new RescueEthCall__Outputs(this);
  }
}

export class RescueEthCall__Inputs {
  _call: RescueEthCall;

  constructor(call: RescueEthCall) {
    this._call = call;
  }
}

export class RescueEthCall__Outputs {
  _call: RescueEthCall;

  constructor(call: RescueEthCall) {
    this._call = call;
  }
}

export class SetFeeCall extends ethereum.Call {
  get inputs(): SetFeeCall__Inputs {
    return new SetFeeCall__Inputs(this);
  }

  get outputs(): SetFeeCall__Outputs {
    return new SetFeeCall__Outputs(this);
  }
}

export class SetFeeCall__Inputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }

  get _newFee(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetFeeCall__Outputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnlistAuctionItemCall extends ethereum.Call {
  get inputs(): UnlistAuctionItemCall__Inputs {
    return new UnlistAuctionItemCall__Inputs(this);
  }

  get outputs(): UnlistAuctionItemCall__Outputs {
    return new UnlistAuctionItemCall__Outputs(this);
  }
}

export class UnlistAuctionItemCall__Inputs {
  _call: UnlistAuctionItemCall;

  constructor(call: UnlistAuctionItemCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get sellerNonce(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnlistAuctionItemCall__Outputs {
  _call: UnlistAuctionItemCall;

  constructor(call: UnlistAuctionItemCall) {
    this._call = call;
  }
}

export class UnlistItemCall extends ethereum.Call {
  get inputs(): UnlistItemCall__Inputs {
    return new UnlistItemCall__Inputs(this);
  }

  get outputs(): UnlistItemCall__Outputs {
    return new UnlistItemCall__Outputs(this);
  }
}

export class UnlistItemCall__Inputs {
  _call: UnlistItemCall;

  constructor(call: UnlistItemCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UnlistItemCall__Outputs {
  _call: UnlistItemCall;

  constructor(call: UnlistItemCall) {
    this._call = call;
  }
}

export class VoteOfferCall extends ethereum.Call {
  get inputs(): VoteOfferCall__Inputs {
    return new VoteOfferCall__Inputs(this);
  }

  get outputs(): VoteOfferCall__Outputs {
    return new VoteOfferCall__Outputs(this);
  }
}

export class VoteOfferCall__Inputs {
  _call: VoteOfferCall;

  constructor(call: VoteOfferCall) {
    this._call = call;
  }

  get offerer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class VoteOfferCall__Outputs {
  _call: VoteOfferCall;

  constructor(call: VoteOfferCall) {
    this._call = call;
  }
}

export class WithdrawAccruedFeesCall extends ethereum.Call {
  get inputs(): WithdrawAccruedFeesCall__Inputs {
    return new WithdrawAccruedFeesCall__Inputs(this);
  }

  get outputs(): WithdrawAccruedFeesCall__Outputs {
    return new WithdrawAccruedFeesCall__Outputs(this);
  }
}

export class WithdrawAccruedFeesCall__Inputs {
  _call: WithdrawAccruedFeesCall;

  constructor(call: WithdrawAccruedFeesCall) {
    this._call = call;
  }
}

export class WithdrawAccruedFeesCall__Outputs {
  _call: WithdrawAccruedFeesCall;

  constructor(call: WithdrawAccruedFeesCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
