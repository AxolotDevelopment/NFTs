// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ERC1155Locked extends ethereum.Event {
  get params(): ERC1155Locked__Params {
    return new ERC1155Locked__Params(this);
  }
}

export class ERC1155Locked__Params {
  _event: ERC1155Locked;

  constructor(event: ERC1155Locked) {
    this._event = event;
  }

  get locker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get fraktal(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ERC1155UnLocked extends ethereum.Event {
  get params(): ERC1155UnLocked__Params {
    return new ERC1155UnLocked__Params(this);
  }
}

export class ERC1155UnLocked__Params {
  _event: ERC1155UnLocked;

  constructor(event: ERC1155UnLocked) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get collateralNft(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ERC721Locked extends ethereum.Event {
  get params(): ERC721Locked__Params {
    return new ERC721Locked__Params(this);
  }
}

export class ERC721Locked__Params {
  _event: ERC721Locked;

  constructor(event: ERC721Locked) {
    this._event = event;
  }

  get locker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get fraktal(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ERC721UnLocked extends ethereum.Event {
  get params(): ERC721UnLocked__Params {
    return new ERC721UnLocked__Params(this);
  }
}

export class ERC721UnLocked__Params {
  _event: ERC721UnLocked;

  constructor(event: ERC721UnLocked) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collateralNft(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class FraktalProtocolUpgraded extends ethereum.Event {
  get params(): FraktalProtocolUpgraded__Params {
    return new FraktalProtocolUpgraded__Params(this);
  }
}

export class FraktalProtocolUpgraded__Params {
  _event: FraktalProtocolUpgraded;

  constructor(event: FraktalProtocolUpgraded) {
    this._event = event;
  }

  get _newAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Minted extends ethereum.Event {
  get params(): Minted__Params {
    return new Minted__Params(this);
  }
}

export class Minted__Params {
  _event: Minted;

  constructor(event: Minted) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get urlIpfs(): string {
    return this._event.parameters[1].value.toString();
  }

  get tokenAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get nftId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RevenuesProtocolUpgraded extends ethereum.Event {
  get params(): RevenuesProtocolUpgraded__Params {
    return new RevenuesProtocolUpgraded__Params(this);
  }
}

export class RevenuesProtocolUpgraded__Params {
  _event: RevenuesProtocolUpgraded;

  constructor(event: RevenuesProtocolUpgraded) {
    this._event = event;
  }

  get _newAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Factory__lockedERC1155sResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Factory__lockedERC721sResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Factory extends ethereum.SmartContract {
  static bind(address: Address): Factory {
    return new Factory("Factory", address);
  }

  Fraktalimplementation(): Address {
    let result = super.call(
      "Fraktalimplementation",
      "Fraktalimplementation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_Fraktalimplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "Fraktalimplementation",
      "Fraktalimplementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getERC1155Collateral(fraktalAddress: Address): Address {
    let result = super.call(
      "getERC1155Collateral",
      "getERC1155Collateral(address):(address)",
      [ethereum.Value.fromAddress(fraktalAddress)]
    );

    return result[0].toAddress();
  }

  try_getERC1155Collateral(
    fraktalAddress: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getERC1155Collateral",
      "getERC1155Collateral(address):(address)",
      [ethereum.Value.fromAddress(fraktalAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getERC721Collateral(fraktalAddress: Address): Address {
    let result = super.call(
      "getERC721Collateral",
      "getERC721Collateral(address):(address)",
      [ethereum.Value.fromAddress(fraktalAddress)]
    );

    return result[0].toAddress();
  }

  try_getERC721Collateral(
    fraktalAddress: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getERC721Collateral",
      "getERC721Collateral(address):(address)",
      [ethereum.Value.fromAddress(fraktalAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getFraktalAddress(_tokenId: BigInt): Address {
    let result = super.call(
      "getFraktalAddress",
      "getFraktalAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return result[0].toAddress();
  }

  try_getFraktalAddress(_tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getFraktalAddress",
      "getFraktalAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getFraktalsLength(): BigInt {
    let result = super.call(
      "getFraktalsLength",
      "getFraktalsLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getFraktalsLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFraktalsLength",
      "getFraktalsLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  importERC1155(
    _tokenAddress: Address,
    _tokenId: BigInt,
    majority: i32
  ): Address {
    let result = super.call(
      "importERC1155",
      "importERC1155(address,uint256,uint16):(address)",
      [
        ethereum.Value.fromAddress(_tokenAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(majority))
      ]
    );

    return result[0].toAddress();
  }

  try_importERC1155(
    _tokenAddress: Address,
    _tokenId: BigInt,
    majority: i32
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "importERC1155",
      "importERC1155(address,uint256,uint16):(address)",
      [
        ethereum.Value.fromAddress(_tokenAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(majority))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  importERC721(
    _tokenAddress: Address,
    _tokenId: BigInt,
    majority: i32
  ): Address {
    let result = super.call(
      "importERC721",
      "importERC721(address,uint256,uint16):(address)",
      [
        ethereum.Value.fromAddress(_tokenAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(majority))
      ]
    );

    return result[0].toAddress();
  }

  try_importERC721(
    _tokenAddress: Address,
    _tokenId: BigInt,
    majority: i32
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "importERC721",
      "importERC721(address,uint256,uint16):(address)",
      [
        ethereum.Value.fromAddress(_tokenAddress),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(majority))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lockedERC1155s(param0: Address): Factory__lockedERC1155sResult {
    let result = super.call(
      "lockedERC1155s",
      "lockedERC1155s(address):(address,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Factory__lockedERC1155sResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_lockedERC1155s(
    param0: Address
  ): ethereum.CallResult<Factory__lockedERC1155sResult> {
    let result = super.tryCall(
      "lockedERC1155s",
      "lockedERC1155s(address):(address,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Factory__lockedERC1155sResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  lockedERC721s(param0: Address): Factory__lockedERC721sResult {
    let result = super.call(
      "lockedERC721s",
      "lockedERC721s(address):(address,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Factory__lockedERC721sResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_lockedERC721s(
    param0: Address
  ): ethereum.CallResult<Factory__lockedERC721sResult> {
    let result = super.tryCall(
      "lockedERC721s",
      "lockedERC721s(address):(address,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Factory__lockedERC721sResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  mint(urlIpfs: string, majority: i32): Address {
    let result = super.call("mint", "mint(string,uint16):(address)", [
      ethereum.Value.fromString(urlIpfs),
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(majority))
    ]);

    return result[0].toAddress();
  }

  try_mint(urlIpfs: string, majority: i32): ethereum.CallResult<Address> {
    let result = super.tryCall("mint", "mint(string,uint16):(address)", [
      ethereum.Value.fromString(urlIpfs),
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(majority))
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  revenueChannelImplementation(): Address {
    let result = super.call(
      "revenueChannelImplementation",
      "revenueChannelImplementation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_revenueChannelImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "revenueChannelImplementation",
      "revenueChannelImplementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _implementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _revenueChannelImplementation(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimERC1155Call extends ethereum.Call {
  get inputs(): ClaimERC1155Call__Inputs {
    return new ClaimERC1155Call__Inputs(this);
  }

  get outputs(): ClaimERC1155Call__Outputs {
    return new ClaimERC1155Call__Outputs(this);
  }
}

export class ClaimERC1155Call__Inputs {
  _call: ClaimERC1155Call;

  constructor(call: ClaimERC1155Call) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimERC1155Call__Outputs {
  _call: ClaimERC1155Call;

  constructor(call: ClaimERC1155Call) {
    this._call = call;
  }
}

export class ClaimERC721Call extends ethereum.Call {
  get inputs(): ClaimERC721Call__Inputs {
    return new ClaimERC721Call__Inputs(this);
  }

  get outputs(): ClaimERC721Call__Outputs {
    return new ClaimERC721Call__Outputs(this);
  }
}

export class ClaimERC721Call__Inputs {
  _call: ClaimERC721Call;

  constructor(call: ClaimERC721Call) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimERC721Call__Outputs {
  _call: ClaimERC721Call;

  constructor(call: ClaimERC721Call) {
    this._call = call;
  }
}

export class ImportERC1155Call extends ethereum.Call {
  get inputs(): ImportERC1155Call__Inputs {
    return new ImportERC1155Call__Inputs(this);
  }

  get outputs(): ImportERC1155Call__Outputs {
    return new ImportERC1155Call__Outputs(this);
  }
}

export class ImportERC1155Call__Inputs {
  _call: ImportERC1155Call;

  constructor(call: ImportERC1155Call) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get majority(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class ImportERC1155Call__Outputs {
  _call: ImportERC1155Call;

  constructor(call: ImportERC1155Call) {
    this._call = call;
  }

  get _clone(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class ImportERC721Call extends ethereum.Call {
  get inputs(): ImportERC721Call__Inputs {
    return new ImportERC721Call__Inputs(this);
  }

  get outputs(): ImportERC721Call__Outputs {
    return new ImportERC721Call__Outputs(this);
  }
}

export class ImportERC721Call__Inputs {
  _call: ImportERC721Call;

  constructor(call: ImportERC721Call) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get majority(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class ImportERC721Call__Outputs {
  _call: ImportERC721Call;

  constructor(call: ImportERC721Call) {
    this._call = call;
  }

  get _clone(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get urlIpfs(): string {
    return this._call.inputValues[0].value.toString();
  }

  get majority(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get _clone(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetFraktalImplementationCall extends ethereum.Call {
  get inputs(): SetFraktalImplementationCall__Inputs {
    return new SetFraktalImplementationCall__Inputs(this);
  }

  get outputs(): SetFraktalImplementationCall__Outputs {
    return new SetFraktalImplementationCall__Outputs(this);
  }
}

export class SetFraktalImplementationCall__Inputs {
  _call: SetFraktalImplementationCall;

  constructor(call: SetFraktalImplementationCall) {
    this._call = call;
  }

  get _newAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFraktalImplementationCall__Outputs {
  _call: SetFraktalImplementationCall;

  constructor(call: SetFraktalImplementationCall) {
    this._call = call;
  }
}

export class SetRevenueImplementationCall extends ethereum.Call {
  get inputs(): SetRevenueImplementationCall__Inputs {
    return new SetRevenueImplementationCall__Inputs(this);
  }

  get outputs(): SetRevenueImplementationCall__Outputs {
    return new SetRevenueImplementationCall__Outputs(this);
  }
}

export class SetRevenueImplementationCall__Inputs {
  _call: SetRevenueImplementationCall;

  constructor(call: SetRevenueImplementationCall) {
    this._call = call;
  }

  get _newAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRevenueImplementationCall__Outputs {
  _call: SetRevenueImplementationCall;

  constructor(call: SetRevenueImplementationCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
